" If you come from bash you might have to change your $PATH.
nnoremap <silent> <C-i> :Files<CR>
nmap  <C-b> :NERDTreeToggle<CR>
nnoremap <silent> gh :call CocAction('doHover')<CR>
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
inoremap <silent><expr> <TAB>
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
noremap <silent> gn :bn<CR>
noremap <silent> gp :bp<CR>
" trigger auto complete on type
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" trigger auto complete on ctrl + w
inoremap <silent><expr> <C-a> coc#refresh()
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"


" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gi <Plug>(coc-references)

" Remap for rename current word
nmap <F2> <Plug>(coc-rename)

" Remap for format selected region
nmap <leader>f <Plug>(coc-format-selected)

xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)
function! s:show_documentation()
if (index(['vim','help'], &filetype) >= 0)
execute 'h '.expand('<cword>')
else
call CocAction('doHover')
endif
endfunction


nnoremap <space>d show_documentation()<CR>
tnoremap jk <C-\><C-n>
"save and quit
nnoremap <C-M> :wq<CR>
nnoremap <M-h> <C-w>h
nnoremap <M-l> <C-w>l
nnoremap <M-k> <C-w>k
nnoremap <M-j> <C-w>j
nnoremap <M-S-k> :vertical resize +3<CR>
nnoremap <M-S-j> :vertical resize -3<CR>
nnoremap <M-S-l> :vsplit<CR>
nnoremap <M-S-h> :split<CR>
nnoremap <M-space> :NERDTreeFocus<CR>
nnoremap <M-/> :LspSignatureHelp<CR>
nnoremap <M-a> <Plug>(coc-codeaction)
nnoremap <M-i> :CodeActionMenu<CR>
nnoremap <C-z> :ToggleTerminal<Enter>
tnoremap <silent> <C-z> <C-\><C-n>:ToggleTerminal<Enter>
