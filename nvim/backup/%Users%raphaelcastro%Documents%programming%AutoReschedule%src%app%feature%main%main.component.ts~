import { take, switchMap } from "rxjs/operators";
import * as _ from "lodash";
import {
  Component,
  OnInit,
  ApplicationRef,
  ViewChild,
  ElementRef,
} from "@angular/core";
import { Router, ActivatedRoute } from "@angular/router";
import { HttpClient } from "@angular/common/http";
import Swal from "sweetalert2";
import { SweetAlertOptions } from "sweetalert2";
import { titleTrigger, titleFade, fadeIn } from "./main.animations";
import { PostService } from "../post.service";
import { AngularFirestore } from "@angular/fire/firestore";
import { Observable, of } from "rxjs";
declare var CollectJS: any;

export interface queryValues {
  address1: string;
  adults: string;
  amountPaid?: string;
  arrival: string;
  children: string;
  city: string;
  code?: string;
  dbid: string;
  destination: string;
  first_name: string;
  last_name: string;
  max: number;
  roomCode: string;
  roomType: string;
  source: string;
  state: string;
  status: string;
  var: string;
  zip: string;
}

@Component({
  selector: "app-main",
  templateUrl: "./main.component.html",
  styleUrls: ["./main.component.scss"],
  animations: [titleTrigger, titleFade, fadeIn],
})
export class MainComponent implements OnInit {
  @ViewChild("pay", { static: false }) pay: ElementRef;

  billing: any;
  cardResponse: any;
  code: string;
  public current = 0;
  date: any;
  guestPaid = false;
  guestProfile;
  map = {
    Info: (profile) => {
      this.guestProfile = _.cloneDeep(profile);
      this.profile = JSON.parse(JSON.stringify(profile));
      delete profile.children;
      delete profile.adults;
      delete profile.roomType;
      delete profile.destination;
      this.billing = profile;

      return true;
    },
    "Pick a Date": (date) => {
      window.scrollTo(0, 10);
      this.date = date;
      if (!this.guestPaid) {
        this.pay.nativeElement.click();
      }
      return true;
    },
    Secure: (event) => {
      if (event) return event;
      this.cardResponse = null;
      this.pay.nativeElement.click();
      console.log(this.prefillValues);
      return event;
    },
    Finalize: (bool) => {
      const fullName = `${this.prefillValues.first_name} ${this.prefillValues.last_name}`;
      //if (fullName === 'John Test') return;
      let source;
      if (this.prefillValues.source) {
        source = this.prefillValues.source.split("-");
      }
      const guest = {
        source: source ? source[0] : "NRO",
        avenue: source ? source[1] : "Email",
        dbid: this.prefillValues.dbid,
        date: this.date,
        confirmation: "_",
        cardResponse: this.cardResponse,
        code: this.code,
        status: this.prefillValues.status,
      };

      const isSchedule = this.prefillValues.var === "Schedule";
      if (isSchedule) {
        guest["roomCode"] = this.prefillValues.roomCode;
        guest["profile"] = this.guestProfile;
        this.messanger.postSchedule(guest);
      } else {
        this.messanger.post(guest);
      }

      const logger = {};
      logger[this.prefillValues.dbid] = true;
      this.af.collection("data").doc("users").set(logger, { merge: true });
      return bool;
    },
    "All Set": () => {},
  };
  public paid = [
    { label: "Info", icon: "user" },
    { label: "Pick a Date", icon: "calendar-date" },
    { label: "Finalize", icon: "preview" },
    { label: "All Set!", icon: "file-add" },
  ];
  prefillValues: queryValues;
  profile;
  query: any;
  showSpinner = false;
  soldOutDates: Array<string>;
  stepOutput;
  public unpaid = [
    { label: "Info", icon: "user" },
    { label: "Pick a Date", icon: "calendar-date" },
    { label: "Secure", icon: "dollar" },
    { label: "Finalize", icon: "preview" },
    { label: "All Set!", icon: "file-add" },
  ];

  constructor(
    public route: ActivatedRoute,
    private app: ApplicationRef,
    private http: HttpClient,
    private messanger: PostService,
    public af: AngularFirestore
  ) {}

  changeStep(event) {
    if (this.cardResponse) {
      if (this.cardResponse.response != 1) this.cardResponse = null;
    }
    window.scrollTo(0, 0);
    if (this.stepOutput[event].label === "All Set!") {
      Swal.fire({
        icon: "error",
        title: "Please Follow the steps",
        text: "You must pick a date and follow all of the steps before submitting your dates.",
        confirmButtonColor: "green",
      });
    } else {
      this.current = event;
    }
  }

  next(event) {
    window.scrollTo(0, 0);
    const current = this.stepOutput[this.current].label;
    const governer =!this.map[current](event)
    if (governer) return;
    this.current += 1;
    this.app.tick();
  }

  ngOnInit() {
    const query = this.route.queryParams as Observable<queryValues>;
    query
      .pipe(
        switchMap((val) => {
          const message: any = {
            icon: "info",
            title: "Info",
            text: "Due to your fast approaching arrival date please call to reschedule @ 844.648.2229 Mon-Sat 9am-9pm est",
            confirmButtonColor: "green",
          };
          function closeWindow() {
            window.location.href = "https://monsterrg.com/contact/";
          }
          if (
            val.destination.includes("WG - ") ||
            val.destination.includes("WK - Palm Springs, CA") ||
            val.destination.includes("WK - San Diego, CA")
          ) {
            Swal.fire(message).then(closeWindow);
          }
          if (!val.destination) return of([]);
          return this.af
            .collection("soldOutDates")
            .doc(val.destination)
            .collection("dates")
            .valueChanges();
        })
      )
      .subscribe((val) => {
        console.log("***");

        console.log(val);

        this.soldOutDates = val.map((obj) =>
          new Date(obj.selectedDate).toDateString()
        );
      });
    // this.af
    // 	.collection('soldOutDates')
    // 	.valueChanges()
    // 	.subscribe(val => {
    // 		if (this.prefillValues.destination === 'CR - Branson, MO') {
    // 			//@ts-ignore
    // 			this.soldOutDates = val.map(obj =>
    // 				//@ts-ignore
    // 				new Date(obj.selectedDate).toDateString()
    // 			);
    // 		} else {
    // 			this.soldOutDates = [];
    // 		}
    // 	});

    query.subscribe((_val: queryValues) => {
      BlockWithinSevenDays(_val);
      const val = _.cloneDeep(_val);
      let arr;
      if (_val.roomType) {
        arr = _val.roomType.split("-");
      }
      if (arr && arr[0] && arr[2]) {
        val.roomType = `${arr[0]}-${arr[2]}`;
        val.max = parseInt(arr[1].match(/\d/)[0], 10);
      }

      this.prefillValues = val;

      if (_val.code === "1215") {
        this.stepOutput = this.paid;
        this.code = _val.code;
        this.guestPaid = true;
      } else {
        this.stepOutput = this.unpaid;
      }
      this.query = _val;
      setVisitToken(this);
      // const logger = {};
      // logger[val.dbid] = false;
      // this.af.collection('data').doc('users').set(logger, { merge: true });
    });
    configure(this);
  }

  validateBilling(res) {
    this.showSpinner = true;
    this.app.tick();
    var output = {
      billing: this.profile ? this.billing : {},
      transInfo: {
        token: res.token,
        amount: 150,
      },
    };
    output.billing.ponumber = "monster";

    this.http
      .post(
        "https://us-central1-merchantapi-b7b17.cloudfunctions.net/portal",
        JSON.stringify(output)
      )
      .subscribe((_val) => {
        //@ts-ignore
        if (_val.response == 1) this.guestPaid = true;
        this.cardResponse = _val;
        this.showSpinner = false;
        this.app.tick();
      });
  }
}

function configure(comp: MainComponent) {
  const bound = comp.validateBilling.bind(comp);
  CollectJS.configure({
    paymentSelector: "#customPayButton",
    buttonText: "Secure Refundable $150 Deposit",
    paymentType: "cc",
    callback: bound,
  });
}

async function setVisitToken(context: MainComponent) {
  const dbid = context.prefillValues.dbid;
  const doc = await new Promise((r) => {
    context.af
      .collection("data")
      .doc("users")
      .valueChanges()
      .pipe(take(1))
      .subscribe((doc) => {
        r(doc);
      });
  });
  const logger = {};
  !doc[dbid]
    ? (logger[dbid] = false)
    : (logger[dbid] = logger[dbid] = doc[dbid]);
  context.af.collection("data").doc("users").set(logger, { merge: true });
}

function BlockWithinSevenDays(val: queryValues) {
  if (!val.arrival) return;
  const date = new Date(val.arrival.split("-").join("/")).getTime();
  const oneDay = 86400000;
  const sevenDays = oneDay * 7;
  const today = new Date().getTime();
  const isWithin7Days = today + sevenDays >= date;
  const isNotPassed = today < date;
  function closeWindow() {
    window.location.href = "https://monsterrg.com/contact/";
  }

  const message: SweetAlertOptions = {
    icon: "info",
    title: "Info",
    text: "Due to your fast approaching arrival date please call to reschedule @ 844.648.2229 Mon-Sat 9am-9pm est",
    confirmButtonColor: "green",
  };

  if (isWithin7Days && isNotPassed) Swal.fire(message).then(closeWindow);
  return;
}
