import { datatype } from "faker";
import {chunk} from 'lodash'

/* <-- Import End --> */

//@ts-ignore
const { number, string } = datatype;

export async function moveDocuments(to: string, from: string, db: any) {
  const collectionSnap = await db.collection(from).get();
  const chunkedDocs = chunk(collectionSnap.docs, 100)
  for (let i = 0; i < chunkedDocs.length; i++) {
    const chunk = chunkedDocs[i]
    await executeMove(db, chunk, to)
  }
  return {to, from}
}

async function executeMove(db: any, collectionSnap: any, to: any) {
  console.log('**************')
  console.log(collectionSnap.length)
  console.log('**************')
  await db.runTransaction(async (transaction: any) => {
    const docRefs = collectionSnap.map((docSnap:any) => docSnap.ref);
    const docValues = collectionSnap.map((docSnap:any) => docSnap.data());
   docRefs.forEach((doc: any) => transaction.delete(doc));
   docValues.forEach((doc:any) => transaction.set(db.collection(to).doc(), doc));
    return null;
  });
  return null
}

export async function cleanUp(pendingDocSnaps: any, db:any) {
  const cleanUpBatch = db.batch();
  pendingDocSnaps.docs.forEach((doc: any) => cleanUpBatch.delete(doc.ref));
  await cleanUpBatch.commit();
}

export async function checkIfDocsMoved( db:any) {
  const pendingDocSnaps = await db.collection("pending").get();
  const pendingDocs = pendingDocSnaps.docs.map((doc:any) => doc.data());
  expect(pendingDocs.length).toBe(10);
  return pendingDocSnaps;
}


export async function setUpTestDocuments(size: number, target: string, db: any) {
  const oldCollectionSnap = await db.collection(target).get();
  const oldBatch = db.batch();
  oldCollectionSnap.docs.forEach((doc:any) => oldBatch.delete(doc.ref));
  await oldBatch.commit();
  await createTestDocuments(size, target,db);
  return size
}

async function createTestDocuments(size: number, target: string, db:any) {
  const testDocs = generateTestDocs(size);
  const batch = db.batch();
  testDocs.forEach((doc) => {
    const ref = db.collection(target).doc();
    batch.set(ref, doc);
  });
  await batch.commit();
}

function generateTestDocs(size: number) {
  const output = [];
  for (let i = 0; i < size; i++) {
    output.push({
      htmlField: number(999),
      id: number(9999999),
      linkField: number(999),
      table: string(9),
    });
  }
  return output;
}

export async function pullCollection(collectionName: string, db:any) {
  const collectionSnap = await db.collection(collectionName).get()
  return collectionSnap.docs.map((d: any) => d.data())
}

