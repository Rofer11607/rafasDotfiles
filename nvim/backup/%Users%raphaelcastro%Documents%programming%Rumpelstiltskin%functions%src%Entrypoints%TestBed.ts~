import { getSecret, SECRETS_CONF } from "../../secrets/CRM";
import * as functions from "firebase-functions";
import { SHA256 } from "crypto-js";
import {QB_CFG, quickbaseRead, quickbaseWrite} from "../Shared/Quickbase";
import {BuildWelcomeLetterReference} from "./CreateLink/CreateLink.LX";
import {setUpTestDocuments, pullCollection} from "./RetriggerFailed/MoveDocuments";
import {db} from '../Shared/firestore'


/* <-- Import End --> */

const CONFIG = {
  funcs: {
    createTestDocs: async (body) => {
      const {size} = body
      return await setUpTestDocuments(size, "requests",db);
    },
    getTestDocs: async (body: any) => {
      const {collectionName} = body;
      return pullCollection(collectionName, db);
    },
    getSecret: async () => {
      const { CRM } = SECRETS_CONF;
      const secret = await getSecret(CRM);
      const res = SHA256(secret.headers as any);
      return res;
    },
    createToken: async () => {
      const { quickbase } = QB_CFG;
      const { table } = quickbase;
      const { johnTest: id, htmlField, linkField } = CONFIG;
      const link = BuildWelcomeLetterReference({
        table,
        id,
        htmlField,
        linkField,
      });
      return link;
    },
    wipeLink: async () => {
      const headers = await getSecret(SECRETS_CONF.CRM);
      await quickbaseWrite({
        headers,
        id: 61027,
        value: "",
        to: "bmhvhc72c",
        field: 533,
      });
      return true;
    },
    getCrmLink: async () => {
      const headers = await getSecret(SECRETS_CONF.CRM);
      const val = await quickbaseRead({
        id: 61027,
        from: "bmhvhc72c",
        headers,
        select: [533],
      });
      return val.data[0]["533"].value;
    },
  },
  johnTest: 61027,
  linkField: 533,
  htmlField: 651,
};

export const testBed = functions.https.onRequest(async (request, response) => {
  const type = request.query.type;
  const body = request.body;
  const callback = CONFIG.funcs[type as any];
  const res = await callback(body);
  response.status(200).send(JSON.stringify({ res }));
});
